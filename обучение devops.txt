Про сис админство и девопс.
Сис админы будут нужны, но в меньшей степени и в основном в дата центрах либо там где нужно админить железо.
Я делаю акцент на девопс, тк инженеров мало, а спрос на них еще велик ближайшие 5-10 лет. Сам сейчас работаю девопсом, потому знаю эту кухню.
Тут чтоб быть в одном контексте скажу что девопс - это современный процесс в разработке цифровых продуктов.
Его основной посыл в ускорении разработки и быстрой доставке новых ценностей продукта пользователям.
Девопс это и разработка продукта и его эксплуатация.
Это значит что разработчики пишут код, его нужно быстро запускать в различных средах, как правило в тестовой среде, на препроде и проде.
Помимо, нужно следить за работой как самого продукта (приложения) так и систем, которые ему необходимы, например облако в котором развернут продукт. Ну и в случае алерта принимать меры по тушению пожаров. Это про мониторинг систем.
Инженер девопс - это разработчик-автоматизатор систем, в которых создается продукт и сред, в которых он запускается.

Из это следует что нужно знать:
Как и где хранить код - Git, Github, Gitlab
Где и как запускать код - CI/CD (Непрерывная интеграция (Continuous Integration, CI) и непрерывная поставка (Continuous Delivery, CD)
На чем запускать код - Контейнеры, Серверлесс, Виртуальные машины, Железо
Работа с сетью - фаерволы, порты, CIDR, VPN
Мониторинг и логирование - Prometheus, ELK (Elasticsearch, Logstash и Kibana), Grafana и тд
Системы контейнеризации - Docker, Kubernetes
Системы управления инфраструктурой как код (IAC) - Ansible, Teraform
Python, Bash для автоматизации.
Вебсервер - Nginx как минимум.
Базы данных - Postgres и тд.
Это прям в кратце. Для начала главное понять зачем оно все надо и постепенно набираться опыта.

Раз ты уже начал на джанго и питоне - отлично!
Ты можешь комплексно затронуть большую часть того что я перечислил выше и сделать себе резюме с готовым проектом и востребованными технологиями. Это займет какое то время.

Вводная:
Все делаем на Linux, если убунту - ок, не ниже 20.04, а лучше бери последнию LTS.
Обычно разработка ведется локально и изменения пушатся в общий репозиторий.
Делай свой сайт на джанго сразу в GIT локально на убунте,
Заведи бесплатный аккаунт на Gitlab или Github, там создашь репозиторий для своего кода приложения на джанго и будешь пушить все изменения туда.
Из этого репозитория можно забирать код и разворачивать его там где хочешь и как хочешь. Это относится к CI/CD.
Чтоб не терять время пробуй осваивать Docker для упаковки своего приложения на джанго. Здесь тебе нужен бесплатный акк на Docker Hub.
Визуализируй структуру своего приложения и компонентов архитектуры например в Miro или в Visio или в чем то подобном. Я использую OmniGraffle на маке. Это всегда помогает восприятию.

Для начала попробуй реализовать такую часть проекта:

1 Создаешь Django App локально в git,
2 Создаешь Docker image со своим Django App,
3 Из Docker image создаешь контейнер (docker build)
4 Запускаешь контейнер локально, проверяешь все ли ок
5 Пушишь image в Docker Hub
6 Создаешь репозиторий в Github или Gitlab
7 Пушишь код приложения вместе с DockerFile в репозиторий
8 Арендуешь в Датацентре дешевую виртуалку на убунте
9 Ставишь на виртуалку Docker Engine
10 Пишешь bash скрипт, который копирует на виртуалку docker image из твоего репозитория на Docker Hub, билдит из image контейнер и запускает его на определенном порту.
11 Проверяешь по ip сервера и порту на котором запущен контейнер, что приложение работает на виртуалке так же как у тебя локально на убунте.

Для начала этого хватит.
Затем можно:
домен купить,
поставить на виртуалку Nginx,
настроить SSL сертификат,
настроить прокси-пасс на порт контейнера.

Затем углубляться в CI/CD и много чего еще)

Делай себе заметки,
Используй IDE например Visual Studio Code или PyCharm.
Пришли мне ссылку на репозитрий с кодом, чтоб я мог локально тоже развернуть и подсказать более детальней.
Я могу помогать подсказывать что и как лучше, буду стараться отвечать по возможности быстро. Ссылки на все легко найти. Книги про девопс - Python и DevOps (O'Reilly), "Проект Феникс" - художественная, но читается интересно, там как раз про все стереотипы старых методов разработки и пришедшему девопс.

Если интересен такой план, то давай начинать. Мне хотелось бы чтоб ты научился таким вещам, а в замен мне нужен хороший отзыв как наставника)
